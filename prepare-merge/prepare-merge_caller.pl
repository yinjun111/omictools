#!/usr/bin/perl -w
use strict;
use Getopt::Long;
use Cwd qw(abs_path);
use File::Basename qw(basename dirname);



########
#Interface
########


my $version="0.1";


my $usage="

prepare-merge
version: $version
Usage: omictools prepare-merge [parameters]

Description: Prepare the external count file to a merge folder that can be used by omictools rnaseq-de and rnaseq-summary


Mandatory Parameters:
    --in|-i           Input file, raw count from RNA-Seq
    --output|-o       Output folder, with similar file content as generated by rnaseq-merge


";

#    --verbose|-v      Verbose


unless (@ARGV) {
	print STDERR $usage;
	exit;
}

my $params=join(" ",@ARGV);
#then call different scripts



########
#Parameters
########
	
my $inputfile;	
my $configfile;
my $outputfolder;
my $dev;
my $verbose=1;

GetOptions(
	"in|i=s" => \$inputfile,
	"out|o=s" => \$outputfolder,
	"verbose|v" => \$verbose,

	"dev" => \$dev,		
);

########
#Prerequisites
########

my $omictoolsfolder="/apps/omictools/";



########
#Program running
########


unless(defined $outputfolder && length($outputfolder)>0 ) {
	print STDERR "\nERROR: -o outputfolder needs to be defined without default value.\n\n";
	exit;
}

if(!-e $outputfolder) {
	mkdir($outputfolder);
}

$outputfolder = abs_path($outputfolder);

my $scriptfolder="$outputfolder/scripts";

if(!-e $scriptfolder) {
	mkdir($scriptfolder);
}


my $logfile="$outputfolder/prepare-merge_run.log";


#write log file
open(LOG, ">$logfile") || die "Error writing into $logfile. $!";

my $now=current_time();
my $timestamp=build_timestamp($now,"long");


print LOG "perl $0 $params\n\n";
print LOG "Start time: $now\n\n";
print LOG "Current version: $version\n\n";

print LOG "\n";

print STDERR "\nomictools prepare-merge $version running ...\n\n" if $verbose;
print LOG "\nomictools prepare-merge $version running ...\n\n";


if(-e $inputfile) {
	print STDERR "cp $inputfile $outputfolder/gene.results.merged.count.txt\n";
	print LOG "cp $inputfile $outputfolder/gene.results.merged.count.txt\n";
	system("cp $inputfile $outputfolder/gene.results.merged.count.txt");
}
else {
	print STDERR "ERROR:$inputfile doesn't exit.\n";
	print LOG "ERROR:$inputfile doesn't exit.\n";
	exit;
}





########
#Functions
########

sub current_time {
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	my $now = sprintf("%04d-%02d-%02d %02d:%02d:%02d", $year+1900, $mon+1, $mday, $hour, $min, $sec);
	return $now;
}

sub getsysoutput {
	my $command=shift @_;
	my $output=`$command`;
	$output=~tr/\r\n//d;
	return $output;
}




sub build_timestamp {
	my ($now,$opt)=@_;
	
	if($opt eq "long") {
		$now=~tr/ /_/;
		$now=~tr/://d;
	}
	else {
		$now=substr($now,0,10);
	}
	
	return $now;
}



sub find_program {
	my $fullprogram=shift @_;
	
	my $program;
	if($fullprogram=~/([^\/]+)$/) {
		$program=$1;
	}
	
	if(-e $fullprogram) {
		return $fullprogram;
	}
	else {
		my $sysout=`$program`;
		if($sysout) {
			my $location=`which $program`;
			return $location;
		}
		else {
			print STDERR "ERROR:$fullprogram or $program not found in your system.\n\n";
			exit;
		}
	}
}

sub get_parent_folder {
	my $dir=shift @_;
	
	if($dir=~/^(.+\/)[^\/]+\/?/) {
		return $1;
	}
}
